/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Q 1 : How to show source code
A 1 : 
Need add "-g" debug message then
(gdb) list
11          printf("7788");
12      }
13
14      int main()
15      {
16          static int s_ilv = 2;
17          static int s_ilvz = 0;
18          static int s_ilnv;
19
20          int lv = 3;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 2 : Show memory address

A 2 :

(gdb) x/4xb address 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 3 : Show disamble code

A 3 :  
(gdb) disass main
                  ~~~~ --------function name
or 

(gdb) disass  /rm  
      Will show new IP assembly code.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 4 : Show content of reg / break point / 

A 4 :
(gdb) info regi
or 
(gdb) info all 

(gdb) info breakpoint

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 4-1 : Continue display content of reg 

A 4-1 :
(gdb) display $rpi 
(gdb) info display 

   Auto-display expressions now in effect:
   Num Enb Expression
   3:   y  $rpi
   2:   y  $rsp
   1:   y  $rbp

(gdb) delete display 2
(gdb) info display
   Auto-display expressions now in effect:
   Num Enb Expression
   3:   y  $rpi
   1:   y  $rbp

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Q 5 : Show memory content

A 5 :

(gdb) x/4xb 0x7fffffffe990
or
(gdb) x/4xb $rbp    <----show rbp's content (addresss) 


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 6 : Show address in ip instructions( code ) for 10 lines.  

A 6 :

(gdb) x/10i $rip

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 6 : Show variable value

A 6 :

(gdb) print VAR_NAME 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Q 7 : break running while functin value is "2" 

A 7 :

break write if $rsi == 2

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 8 : add/delete break points

A8  : b function name

(gdb) info break
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x0000000000400594 in main at bin_example.c:20
~~~~
      delete 1      
            ~~~~   
(gdb) info break
No breakpoints or watchpoints.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 9 : Show local variables value

A9  : info locals 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 10 : Run application with args

A10  : gdb *.exe
       run arg1 arg2 ....


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Q 11 : Run with assembly and source code. 


gdb -tui <your-binary>
(gdb) b main
(gdb) r
(gdb) layout split

  lqqbin_example.cqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk
   x16      {                                                                                                                                                          x
   x17          static int s_ilv = 2;                                                                                                                                  x
   x18          static int s_ilvz = 0;                                                                                                                                 x
   x19          static int s_ilnv;                                                                                                                                     x
   x20                                                                                                                                                                 x
B+>x21          int lv = 3;                                                                                                                                            x
   x22          int lvz = 0;                                                                                                                                           x
   x23          int lnv;                                                                                                                                               x
   x24                                                                                                                                                                 x
   x25          return test(lv);                                                                                                                                       x
   x26      }                                                                                                                                                          x
   x27                                                                                                                                                                 x
   x28                                                                                                                                                                 x
   lqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqk
   x0x4005b1 <main>                 push   %rbp                                                                                                                        x
   x0x4005b2 <main+1>               mov    %rsp,%rbp                                                                                                                   x
   x0x4005b5 <main+4>               sub    $0x10,%rsp                                                                                                                  x
B+>x0x4005b9 <main+8>               movl   $0x3,-0x8(%rbp)                                                                                                             x
   x0x4005c0 <main+15>              movl   $0x0,-0x4(%rbp)                                                                                                             x
   x0x4005c7 <main+22>              mov    -0x8(%rbp),%eax                                                                                                             x
   x0x4005ca <main+25>              mov    %eax,%edi                                                                                                                   x
   x0x4005cc <main+27>              callq  0x400566 <test>                                                                                                             x
   x0x4005d1 <main+32>              leaveq                                                                                                                             x
   x0x4005d2 <main+33>              retq                                                                                                                               x
   x0x4005d3                        nopw   %cs:0x0(%rax,%rax,1)                                                                                                        x
   x0x4005dd                        nopl   (%rax)                                                                                                                      x
   x0x4005e0 <__libc_csu_init>      push   %r15                                                                                                                        x
   mqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqj


* ctrl + x  o  change window and can use arrow key to previous comamnd.

* ctrl + x  2 show register, change 3 windows's content (soruce code / assembaly /regiter info) 

Ref:
ftp://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_7.html
https://blogs.oracle.com/linux/8-gdb-tricks-you-should-know-v2

